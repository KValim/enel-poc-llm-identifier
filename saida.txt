.env.example
```
OPENAI_API_KEY = YOUR_OPENAI_API_KEY

```

.pylintrc
```
[MASTER]
init-hook='import sys; sys.path.append(".")'
```

config.py
```
"""
This module defines the configuration settings for the Flask application.

It includes settings for secret keys, API keys, allowed file extensions, and the model used for OpenAI.
"""

import os

class Config:
    """
    Configuration settings for the Flask application.

    Attributes:
        SECRET_KEY (str): The secret key for the application, used for session management and other security purposes.
        OPENAI_API_KEY (str): The API key for accessing OpenAI services.
        ALLOWED_EXTENSIONS (set): A set of allowed file extensions for file uploads.
        MODEL (str): The model identifier used for OpenAI API requests.
    """
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'supersecretkey'
    OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
    MODEL = "gpt-4o"

```

main.py
```
"""
This script runs the Flask application.

It creates an instance of the Flask app using the `create_app` factory function
from the `app` module and runs the app in debug mode if the script is executed directly.
"""

from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)

```

README.md
```
# ENEL POC LLM IDENTIFIER

A Flask application for validating project structures using OpenAI's API.

## Table of Contents

- [Project Description](#project-description)
- [Setup Instructions](#setup-instructions)
  - [Prerequisites](#prerequisites)
  - [Installation](#installation)
  - [Configuration](#configuration)
- [Usage](#usage)
  - [Running the Application](#running-the-application)
  - [Endpoints](#endpoints)
- [Project Structure](#project-structure)
- [License](#license)

## Project Description

This Flask application helps in validating structures within different projects. The application allows users to upload photos of structures, and then it utilizes OpenAI's API to validate and analyze these images, providing detailed summaries and validation statuses for the structures.

## Setup Instructions

### Prerequisites

- Python 3.x
- Flask
- OpenAI API Key

### Installation

1. Clone the repository:
    ```sh
    git clone https://github.com/yourusername/yourrepository.git
    cd yourrepository
    ```

2. Create and activate a virtual environment:
    ```sh
    python -m venv venv
    source venv/bin/activate  # On Windows use `venv\Scripts\activate`
    ```

3. Install the required packages:
    ```sh
    pip install -r requirements.txt
    ```

### Configuration

1. Copy `.env.example` to `.env` and set your OpenAI API key:
    ```sh
    cp .env.example .env
    ```

    Update `.env` with your OpenAI API key:
    ```
    OPENAI_API_KEY=YOUR_OPENAI_API_KEY
    ```

2. Configure pylint settings by copying `.pylintrc`:
    ```sh
    cp .pylintrc.example .pylintrc
    ```

## Usage

### Running the Application

1. Run the Flask application:
    ```sh
    python main.py
    ```

2. Open your browser and navigate to `http://127.0.0.1:5000/`.

### Endpoints

- **Home** (`/`): Displays a list of projects and allows selection and PDF opening actions.
- **Project Summary** (`/project_summary`): Returns a summary of the project validation status.
- **Select Structure** (`/select_structure`): Allows selection of a structure within a project for validation.
- **Validate Project** (`/validate_project`): Validates all structures within a selected project.
- **Open PDF** (`/open_pdf`): Opens and displays a PDF file related to a project.
- **Upload Photo** (`/upload_photo`): Handles the upload and validation of a photo for a specific structure in a project.
- **Results** (`/results`): Displays the validation results of a structure and handles validation actions.
- **Check Validation Status** (`/check_validation_status`): Checks if there are any unvalidated structures in a project.

## Project Structure

```
ENEL-POC-LLM-IDENTIFIER/
│
├── app/
│   ├── __init__.py
│   ├── routes.py
│   ├── utils.py
│   ├── templates/
│   │   ├── home.html
│   │   ├── error.html
│   │   ├── results.html
│   │   ├── select_structure.html
│   │   ├── upload_photo.html
│   ├── static/
│   │   ├── css/
│   │   │   └── style.css
│   │   ├── images/
│   │   ├── js/
│   │   │   └── script.js
│   │   └── uploads/
│   ├── instance/
│   │   ├── projetos.json
│   │   ├── validation.json
│   │   ├── output.json
│   │   ├── output.txt
│   │   ├── pdfs/
├── .env.example
├── .pylintrc
├── config.py
├── main.py
├── requirements.txt
└── README.md
```

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

```

routes.py
```
"""
This module provides the Flask application routes and logic for managing project validations,
including selecting structures, uploading and validating photos, and generating project summaries.
It integrates OpenAI for generating new output JSON files based on uploaded photos, and uses
utility functions for various validation and data handling tasks.

Modules:
    json: For handling JSON data.
    os: For interacting with the operating system.
    dotenv: For loading environment variables from a .env file.
    flask: For creating the web application and handling routes.
    openai: For integrating OpenAI API.
    werkzeug.utils: For handling secure filenames.

Functions:
    home(): Displays the list of projects and handles project selection and PDF opening actions.
    project_summary(): Returns a summary of the project validation status.
    select_structure(): Allows the selection of a structure within a project for validation.
    validate_project(): Validates all structures within a selected project.
    open_pdf(): Opens and displays a PDF file related to a project.
    upload_photo(): Handles the upload and validation of a photo for a specific structure in a project.
    results(): Displays the validation results of a structure and handles validation actions.
    check_validation_status(): Checks if there are any unvalidated structures in a project.
"""

import json
import os

from dotenv import load_dotenv
from flask import (
    Blueprint, flash, redirect,
    render_template, request, send_file, url_for
    )
from openai import OpenAI
from werkzeug.utils import secure_filename

from .utils import (
    allowed_file, calculate_distance,
    generate_new_output_json, is_valid_latlong,
    load_project_data, load_validation_data,
    save_validation_data, save_project_data,
    order_structures_by_latlong, get_next_post
    )

load_dotenv()

main_bp = Blueprint('main', __name__, template_folder='templates')
validation_bp = Blueprint('validation', __name__, template_folder='templates')

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

@main_bp.route('/', methods=['GET', 'POST'])
def home():
    """
    Home route that displays the list of projects and handles project selection and PDF opening actions.
    Methods: GET, POST
    """

    project_data = load_project_data()
    projects = list(project_data.keys())
    resumo = None

    if request.method == 'POST':
        selected_project = request.form['project']
        action = request.form['action']

        if action == 'select_structure':
            return redirect(url_for('validation.select_structure', project=selected_project))
        elif action == 'open_pdf':
            return redirect(url_for('validation.open_pdf', file='instance/pdfs/' + selected_project + '.pdf'))

    return render_template('home.html', projects=projects, resumo=resumo)

@validation_bp.route('/project_summary', methods=['POST'])
def project_summary():
    """
    Endpoint to get a summary of the project validation status.
    Methods: POST
    """

    selected_project = request.form['project']
    project_data = load_project_data()
    validation_data = load_validation_data()
    estruturas_validadas = validation_data.get('validations', {}).get(selected_project, {})
    posts = list(project_data[selected_project].keys())

    total_extras = sum(1 for estrutura in estruturas_validadas.values() if estrutura['status'] == 'extra')
    total_validas = sum(1 for estrutura in estruturas_validadas.values() if estrutura['status'] == 'valid')
    total_invalidas = sum(1 for estrutura in estruturas_validadas.values() if estrutura['status'] == 'invalid')
    total_nao_validadas = len(posts) - total_validas - total_invalidas - total_extras
    total_avaliadas = total_validas + total_invalidas + total_extras
    total_estruturas = len(posts)-total_extras

    resumo = {
        'total_validas': total_validas,
        'total_invalidas': total_invalidas,
        'total_nao_validadas': total_nao_validadas,
        'total_avaliadas': total_avaliadas,
        'total_estruturas': total_estruturas,
        'total_extras': total_extras
    }

    return json.dumps(resumo)

@validation_bp.route('/select_structure', methods=['GET', 'POST'])
def select_structure():
    project = request.args.get('project')
    project_data = load_project_data()
    validation_data = load_validation_data()
    posts = list(project_data[project].keys())

    # Excluir estruturas com status 'extra'
    posts = [post for post in posts if validation_data['validations'][project].get(post, {}).get('status') != 'extra']

    if 'validations' not in validation_data:
        validation_data['validations'] = {}
    if project not in validation_data['validations']:
        validation_data['validations'][project] = {}

    for post in posts:
        if post not in validation_data['validations'][project]:
            validation_data['validations'][project][post] = {
                'status': 'to_be_validated',
                'comments': ''
            }
    save_validation_data(validation_data)

    # Ordenar estruturas por lat long
    ordered_posts = order_structures_by_latlong({post: project_data[project][post] for post in posts})

    total_validas = sum(1 for estrutura in validation_data['validations'][project].values() if estrutura['status'] == 'valid')
    total_invalidas = sum(1 for estrutura in validation_data['validations'][project].values() if estrutura['status'] == 'invalid')
    total_nao_validadas = len(posts) - total_validas - total_invalidas

    if request.method == 'POST':
        if 'start_validation' in request.form:
            side = request.form['side']
            if side == 'B':
                ordered_posts = ordered_posts[::-1]  # Reverter a ordem dos posts para o lado B
            first_post = ordered_posts[0]
            direction = 'forward' if side == 'A' else 'backward'
            return redirect(url_for('validation.upload_photo', project=project, post=first_post, direction=direction))
        elif 'post' in request.form:
            selected_post = request.form['post']
            return redirect(url_for('validation.upload_photo', project=project, post=selected_post))

    return render_template('select_structure.html', project=project, posts=ordered_posts, validadas=validation_data['validations'][project],
                           total_validas=total_validas, total_invalidas=total_invalidas, total_nao_validadas=total_nao_validadas)

@validation_bp.route('/validate_project', methods=['POST'])
def validate_project():
    """
    Route to validate all structures within a selected project.
    Methods: POST
    """

    project = request.form['project']

    validation_data = load_validation_data()
    if 'validations' not in validation_data:
        validation_data['validations'] = {}
    if project not in validation_data['validations']:
        validation_data['validations'][project] = {}

    # Validar todas as estruturas como 'valid'
    for post in validation_data['validations'][project].keys():
        validation_data['validations'][project][post]['status'] = 'valid'

    save_validation_data(validation_data)

    flash('Projeto validado com sucesso!')
    return redirect(url_for('main.home'))

@validation_bp.route('/open_pdf')
def open_pdf():
    """
    Route to open and display a PDF file related to a project.
    Methods: GET
    """

    filename = request.args.get('file')
    base_path = os.path.abspath('instance/pdfs')
    pdf_path = os.path.join(base_path, filename)
    if not os.path.isfile(pdf_path):
        return render_template('error.html'), 404
    return send_file(pdf_path, as_attachment=False)

@validation_bp.route('/upload_photo', methods=['GET', 'POST'])
def upload_photo():
    project = request.args.get('project')
    post = request.args.get('post')
    direction = request.args.get('direction')
    new_structure = request.args.get('new_structure', False)
    latitude = request.args.get('latitude')
    longitude = request.args.get('longitude')
    example_image = url_for('static', filename='images/photo-example.webp')
    uploaded_image = None

    if request.method == 'POST':
        # Check if a file is uploaded
        if 'photo' not in request.files:
            flash('Nenhuma foto selecionada.')
            return redirect(request.url)

        file = request.files['photo']

        if file.filename == '':
            flash('Nenhuma foto selecionada.')
            return redirect(request.url)

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            # Cria o diretório 'static/uploads' se não existir
            upload_folder = os.path.join('app', 'static', 'uploads')
            if not os.path.exists(upload_folder):
                os.makedirs(upload_folder)

            file_path = os.path.join(upload_folder, filename)
            file.save(file_path)
            uploaded_image = url_for('static', filename=f'uploads/{filename}')

            # Process the image using OpenAI API
            generate_new_output_json(file_path)
            
            # Verifique o conteúdo do JSON de saída
            with open('instance/output.json', 'r', encoding='utf-8') as file:
                output_data = file.read()  # Leia o conteúdo como string

            # Verificar se as frases específicas existem no conteúdo do JSON
            if "Imagem não relacionada." in output_data:
                flash('A imagem enviada não é válida.')
                return redirect(request.url)
            elif "Imagem sem qualidade." in output_data:
                flash('A imagem enviada não tem qualidade.')
                return redirect(request.url)

            # Redirect to results page after processing the image
            return redirect(url_for('validation.results', project=project, post=post, new_structure=new_structure, latitude=latitude, longitude=longitude, direction=direction))

    return render_template('upload_photo.html', project=project, post=post, example_image=example_image, uploaded_image=uploaded_image)

@validation_bp.route('/add_structure_to_project', methods=['POST'])
def add_structure_to_project():
    """
    Route to add the new structure to the project.
    Methods: POST
    """
    project = request.args.get('project')
    post = request.args.get('post')
    latitude = request.args.get('latitude')
    longitude = request.args.get('longitude')

    # Debugging statements
    print(f"Received latitude: {latitude}")
    print(f"Received longitude: {longitude}")

    if not latitude or not longitude:
        flash('Latitude e Longitude são obrigatórias.')
        return redirect(url_for('validation.select_structure', project=project))

    try:
        latitude = float(latitude)
        longitude = float(longitude)
    except ValueError:
        flash('Latitude e Longitude devem ser números válidos.')
        return redirect(url_for('validation.select_structure', project=project))

    # Add the new structure to the project data
    project_data = load_project_data()
    if project not in project_data:
        project_data[project] = {}
    if post not in project_data[project]:
        project_data[project][post] = {
            "latitude": latitude,
            "longitude": longitude,
            "Gabarito": {}
        }
        save_project_data(project_data)

        # Add the new structure to the validation data
        validation_data = load_validation_data()
        if 'validations' not in validation_data:
            validation_data['validations'] = {}
        if project not in validation_data['validations']:
            validation_data['validations'][project] = {}
        validation_data['validations'][project][post] = {
            'status': 'extra',
            'comments': ''
        }
        save_validation_data(validation_data)

        flash(f'Nova estrutura "{post}" adicionada com sucesso ao projeto "{project}"!')

    return redirect(url_for('validation.select_structure', project=project))


@validation_bp.route('/results', methods=['GET', 'POST'])
def results():
    project = request.args.get('project')
    post = request.args.get('post')
    new_structure = request.args.get('new_structure', 'False').lower() == 'true'
    latitude = request.args.get('latitude')
    longitude = request.args.get('longitude')
    direction = request.args.get('direction', 'forward')

    if request.method == 'POST':
        action = request.form['action']
        comments = request.form.get('comments', '')
        validation_data = load_validation_data()
        project_data = load_project_data()

        if 'validations' not in validation_data:
            validation_data['validations'] = {}
        if project not in validation_data['validations']:
            validation_data['validations'][project] = {}

        if action == 'validate_post':
            validation_data['validations'][project][post] = {
                'status': 'valid',
                'comments': comments
            }
            save_validation_data(validation_data)
            if new_structure:
                if project not in project_data:
                    project_data[project] = {}
                project_data[project][post] = {
                    "latitude": float(latitude),
                    "longitude": float(longitude),
                    "Gabarito": {}
                }
                save_project_data(project_data)
                flash('Nova estrutura validada e adicionada ao projeto com sucesso!')
            else:
                flash('Estrutura validada com sucesso!')
            next_post = get_next_post(project, post, direction)
            if next_post:
                return redirect(url_for('validation.upload_photo', project=project, post=next_post, direction=direction))
            else:
                flash('Todas as estruturas foram avaliadas.')
                return redirect(url_for('main.home'))

        elif action == 'invalidate_post':
            validation_data['validations'][project][post] = {
                'status': 'invalid',
                'comments': comments
            }
            save_validation_data(validation_data)
            flash('Estrutura invalidada. Retornando à seleção de estruturas.')
            next_post = get_next_post(project, post, direction)
            if next_post:
                return redirect(url_for('validation.upload_photo', project=project, post=next_post, direction=direction))
            else:
                flash('Todas as estruturas foram avaliadas.')
                return redirect(url_for('main.home'))

        elif action == 'remove_photo':
            flash('Por favor, envie outra foto.')
            return redirect(url_for('validation.upload_photo', project=project, post=post, new_structure=new_structure, latitude=latitude, longitude=longitude, direction=direction))

    validation_data = load_validation_data()
    project_data = load_project_data()

    with open('instance/output.json', 'r', encoding='utf-8') as file:
        output = json.load(file)

    encontrados = {}
    caracteristicas = {}

    if new_structure:
        for item in output:
            if not item.startswith('Características do') and item != "Quantidades":
                encontrados[item] = "Encontrado"
                caracteristicas_item = output.get(f"Características do {item}", {})
                if caracteristicas_item:
                    caracteristicas[item] = caracteristicas_item
    else:
        gabarito = project_data[project][post]['Gabarito']

        for item, _ in gabarito.items():
            if item in output:
                encontrados[item] = "Sim"
                caracteristicas_item = output.get(f"Características do {item}", {})
                if caracteristicas_item:
                    caracteristicas[item] = caracteristicas_item
                if 'Quantidades' in output and item in output['Quantidades']:
                    if item in caracteristicas:
                        caracteristicas[item]['Quantidade Identificada'] = output['Quantidades'][item]
                    else:
                        caracteristicas[item] = {'Quantidade Identificada': output['Quantidades'][item]}
            else:
                encontrados[item] = "Não"

        for item in output:
            if item not in gabarito and not item.startswith('Características do') and item != "Quantidades":
                encontrados[item] = "Encontrado"
                caracteristicas_item = output.get(f"Características do {item}", {})
                if caracteristicas_item:
                    caracteristicas[item] = caracteristicas_item

    results_data = {
        'Itens Verificados': encontrados,
        'Características': caracteristicas
    }

    with open('instance/results.json', 'w', encoding='utf-8') as file:
        json.dump(results_data, file, ensure_ascii=False, indent=4)

    return render_template('results.html', encontrados=encontrados, caracteristicas=caracteristicas, project=project, post=post, new_structure=new_structure)


@validation_bp.route('/check_validation_status', methods=['POST'])
def check_validation_status():
    """
    Endpoint to check if there are any unvalidated structures in a project.
    Methods: POST
    """

    project = request.form['project']
    validation_data = load_validation_data()
    estruturas_validadas = validation_data.get('validations', {}).get(project, {})

    has_unvalidated_structures = any(estrutura['status'] == 'to_be_validated' for estrutura in estruturas_validadas.values())

    return json.dumps({'has_unvalidated_structures': has_unvalidated_structures})

@validation_bp.route('/add_new_structure', methods=['GET', 'POST'])
def add_new_structure():
    """
    Route to add a new structure to the project.
    Methods: GET, POST
    """
    project = request.args.get('project')

    if request.method == 'POST':
        new_structure = request.form.get('new_structure')
        latitude = request.form.get('latitude')
        longitude = request.form.get('longitude')

        if not new_structure or not latitude or not longitude:
            flash('Todos os campos são obrigatórios.')
            return redirect(url_for('validation.add_new_structure', project=project))

        flash(f'Nova estrutura "{new_structure}" iniciando validação!')
        return redirect(url_for('validation.upload_photo', project=project, post=new_structure, new_structure=True, latitude=latitude, longitude=longitude))

    return render_template('add_new_structure.html', project=project)

```

utils.py
```
"""
This module provides various utility functions for handling file validation, project data loading and saving,
distance calculation, latitude and longitude validation, and image processing with OpenAI integration.

Modules:
    base64: For encoding images to base64 strings.
    json: For handling JSON data.
    math: For performing mathematical operations.
    os: For interacting with the operating system.
    re: For regular expression operations.
    openai: For integrating OpenAI API.

Functions:
    allowed_file(filename): Checks if a file is allowed based on its extension.
    load_project_data(): Loads project data from the 'projetos.json' file.
    save_project_data(data): Saves project data to the 'projetos.json' file.
    load_validation_data(): Loads validation data from the 'validation.json' file.
    save_validation_data(data): Saves validation data to the 'validation.json' file.
    calculate_distance(lat1, lon1, lat2, lon2): Calculates the distance between two geographic coordinates.
    is_valid_latlong(lat, lon): Checks if the provided latitude and longitude are valid.
    generate_new_output_json(image_path): Generates a new output JSON based on the provided image.
    encode_image(image_path): Encodes an image to a base64 string.
"""

import base64
import json
import math
import os
import re

from openai import OpenAI

ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

def allowed_file(filename):
    """Check if a file is allowed based on its extension.

    Args:
        filename (str): The name of the file to check.

    Returns:
        bool: True if the file is allowed, False otherwise.
    """

    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def load_project_data():
    """Load project data from the 'projetos.json' file.

    Returns:
        dict: A dictionary containing the project data.
    """

    with open('instance/projetos.json', 'r', encoding='utf-8') as file:
        return json.load(file)

def save_project_data(data):
    """Save project data to the 'projetos.json' file.

    Args:
        data (dict): The project data to save.
    """

    with open('instance/projetos.json', 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

def load_validation_data():
    """Load validation data from the 'validation.json' file.

    Returns:
        dict: A dictionary containing the validation data.
    """

    with open('instance/validation.json', 'r', encoding='utf-8') as file:
        return json.load(file)

def save_validation_data(data):
    """Save validation data to the 'validation.json' file.

    Args:
        data (dict): The validation data to save.
    """

    with open('instance/validation.json', 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

def calculate_distance(lat1, lon1, lat2, lon2):
    """Calculate the distance between two geographic coordinates.

    Args:
        lat1 (float): Latitude of the first point.
        lon1 (float): Longitude of the first point.
        lat2 (float): Latitude of the second point.
        lon2 (float): Longitude of the second point.

    Returns:
        float: The distance between the two points in kilometers.
    """

    r = 6371.0  # Radius of the Earth in kilometers
    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)

    dlat = lat2_rad - lat1_rad
    dlon = lon2_rad - lon1_rad

    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    distance = r * c
    return distance

def is_valid_latlong(lat, lon):
    """Check if the provided latitude and longitude are valid.

    Args:
        lat (str): Latitude to check.
        lon (str): Longitude to check.

    Returns:
        bool: True if both latitude and longitude are valid, False otherwise.
    """

    lat_pattern = re.compile(r'^-?([1-8]?\d(\.\d+)?|90(\.0+)?)$')
    lon_pattern = re.compile(r'^-?((1[0-7]\d(\.\d+)?|180(\.0+)?)|(\d{1,2}(\.\d+)?))$')
    return lat_pattern.match(str(lat)) and lon_pattern.match(str(lon))

def generate_new_output_json(image_path):
    """Generate a new output JSON based on the provided image.

    Args:
        image_path (str): The path to the image file.

    Returns:
        None
    """

    base64_image = encode_image(image_path)
    client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": """### MISSÃO
- Retornar um json com os objetos identificados.

### INSTRUÇÃO
- Você receberá uma imagem de um poste.
- A imagem pode conter dois ou três trasformadores, geralmente um trifásico e um monofásico, ou três monofásicos, preste atenção quando isso acontecer.

### IMPORTANTE
- Se a imagem não tiver nenhuma relação com os equipamentos descritos ou postes eletricos, retorne o json {"mensagem": "Imagem não relacionada."}
- Se a imagem não tiver qualidade o suficiente como foco, iluminação, etc, retorne o json {"mensagem": "Imagem sem qualidade."}
- Procure bem pelas chaves faca, praticamente quase todo poste eletrico de cidade tem essas chaves nas cruzetas.
### DESCRIÇÕES DOS EQUIPAMENTOS
### Tabela de Equipamentos Elétricos

| **Equipamento**                        | **Tamanho** | **Descrição**                                                                                                                                                                                                                                                                                                                                                                                                                                      | **Estrutura**                        | **Observações**                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
|----------------------------------------|-------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------||
| **Transformador Trifásico**            | Grande      | Gabinete retangular (às vezes arredondado), três isoladores de porcelana no topo (as vezes na frente), válvula de pressão                                                                                                                                                                                                                                                                                                                                               | Estrutura metálica robusta          | Às vezes confundido com a Chave Telecomandada que também tem três isoladores na parte superior e tem um formato similar. No entanto, a Chave Telecomandada é retangular 'mais achatada' e o transformador é 'mais comprido'. Além disso, os isoladores da chave são inclinados e ficam tanto na parte superior quanto nas laterais, enquanto os do transformador são retos, geralmente apenas em cima. Também pode ser confundido com o Religador, que tem três isoladores superiores, mas o formato deles é diferente, pois são como um T deitado.    |
| **Transformador Monofásico**           | Médio       | Estrutura cilíndrica e vertical, cinza, dois isoladores de porcelana no topo                                                                                                                                                                                                                                                                                                                                                                       | Terminais laterais para conexões de baixa tensão ||
| **Religador**                          | Médio       | Equipamento retangular achatado com três isoladores de cerâmica. As cerâmicas possuem uma estrutura onde, de um cilindro principal centralizado, se projeta outro cilindro adicional, também envolto por aletas ou discos concêntricos. Este segundo cilindro parece emergir do meio do primeiro.                                                                                                                 | Geralmente fica numa base uns 20 cm afastada do poste, um pouco abaixo da altura de transformadores |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| **Chave Seccionadora Telecomandada**   | Médio       | Corpo metálico, isoladores de porcelana ou compósito em 'V' no topo. Dos dois lados da caixa metálica, há isoladores cilíndricos, geralmente feitos de porcelana ou material polimérico, que são montados em várias direções.                                                                                                                                                                                                                          |                                      | Ela tem isoladores em cima e nas laterais.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| **Chave Seccionadora (Chave Faca)**    | Pequeno     | são dispositivos de seccionamento manual de circuitos elétricos. Elas têm uma aparência característica, com isoladores e lâminas metálicas que podem ser movidas para abrir ou fechar o circuito.                                                                                                                                                                                                                                                                                                                                                                         |                                      |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| **Cruzeta**                            | Pequeno     | Barra transversal montada no topo do poste.                                                                                                                                                                                                                                                                                                                                                                                                        | Estrutura metálica ou de madeira    | Suporte para isoladores e outros equipamentos elétricos.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |

### CHAVES E VALORES JSON
{
  "Poste Elétrico": "Indica a presença (true) ou ausência (false) de um poste elétrico.",
  "Cruzeta": "Indica a presença (true) ou ausência (false) de cruzetas no poste.",
  "Chave Seccionadora Telecomandada": "Indica a presença (true) ou ausência (false) de uma chave seccionadora telecomandada no poste.",
  "Chave Seccionadora (Chave Faca)": "Indica a presença (true) ou ausência (false) de uma chave seccionadora do tipo faca nas cruzetas.",
  "Chave Seccionadora Por Mola": "Indica a presença (true) ou ausência (false) de uma chave seccionadora por mola no poste.",
  "Transformador Monofásico": "Indica a presença (true) ou ausência (false) de um transformador monofásico no poste.",
  "Transformador Trifásico": "Indica a presença (true) ou ausência (false) de um transformador trifásico no poste.",
  "Religador": "Indica a presença (true) ou ausência (false) de um religador no poste.",
  "Medidor de Energia": "Indica a presença (true) ou ausência (false) de um medidor de energia no poste.",
  "Luminária": "Indica a presença (true) ou ausência (false) de uma luminária no poste.",
  "Características do Transformador Monofásico": {
    "Nível de Oxidação": "Descreve o nível de oxidação observado no transformador, podendo ser Baixo, Médio ou Alto.",
  },
  "Características do Transformador Trifásico": {
    "Nível de Oxidação": "Descreve o nível de oxidação observado no transformador, podendo ser Baixo, Médio ou Alto.",
  },
  "Características do Poste Elétrico": {
    "Material": "Descreve o material de construção do poste, como Concreto, Metal, Madeira ou uma combinação de Concreto ou Metal.",
    "Estado de Conservação": "Indica o estado de conservação do poste, podendo ser Novo ou Danificado."
  },
  "Quantidades": {
    "Poste Elétrico": "Indica a quantidade na foto",
    "Cruzeta": "Indica a quantidade na foto",
    "Chave Seccionadora Telecomandada": "Indica a quantidade na foto",
    ...,
  }
}

### NOTAS
- Sempre responder em pt-br
- Não precisa retornar keys com valores vazios ou false.
- Respire fundo.
- Pense passo a passo.
- Caso se empenhe muito te darei uma gorjeta de $1000.
- Visualize o estado após cada etapa de raciocínio.
- Não retorne nada além do json requerido, sem nenhum comentário ou análise."""},
            {"role": "user", "content": [
                {"type": "image_url", "image_url": {
                    "url": f"data:image/png;base64,{base64_image}"}
                }
            ]}
        ],
        temperature=0.0,
    )

    if not response.choices:
        with open('instance/output.json', 'w', encoding='utf-8') as file:
            json.dump({"mensagem": "Erro na resposta da API. Por favor, tente novamente."}, file, ensure_ascii=False, indent=4)
        return

    output_data = response.choices[0].message.content.strip()

    with open('instance/output.txt', 'w', encoding='utf-8') as file:
        file.write(output_data)

    if not output_data:
        with open('instance/output.json', 'w', encoding='utf-8') as file:
            json.dump({"mensagem": "Erro na resposta da API. Por favor, tente novamente."}, file, ensure_ascii=False, indent=4)
        return

    json_match = re.search(r'```json\s*(\{.*\})\s*```', output_data, re.DOTALL)
    if json_match:
        json_str = json_match.group(1)
    else:
        json_str = output_data

    try:
        json_str = json_str.strip()
        if json_str.startswith("```json"):
            json_str = json_str[6:]
        if json_str.startswith("```"):
            json_str = json_str[3:]
        if json_str.endswith("```"):
            json_str = json_str[:-3]
        json_str = json_str.strip()

        output_json = json.loads(json_str)
    except json.JSONDecodeError:
        with open('instance/json_error_log.txt', 'w', encoding='utf-8') as file:
            file.write(json_str)
        with open('instance/output.json', 'w', encoding='utf-8') as file:
            json.dump({"mensagem": "Erro ao processar a resposta da API. Por favor, tente novamente."}, file, ensure_ascii=False, indent=4)
        return

    with open('instance/output.json', 'w', encoding='utf-8') as file:
        json.dump(output_json, file, ensure_ascii=False, indent=4)


def encode_image(image_path):
    """Encode an image to a base64 string.

    Args:
        image_path (str): The path to the image file.

    Returns:
        str: The base64 encoded string of the image.
    """

    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode("utf-8")

def order_structures_by_latlong(structures):
    """
    Orders the structures based on their latitude and longitude.
    
    Args:
        structures (dict): Dictionary of structures with their latitude and longitude.
        
    Returns:
        list: List of structure names ordered by their latitude and longitude.
    """
    return sorted(structures, key=lambda x: (structures[x]['latitude'], structures[x]['longitude']))

def get_next_post(project, current_post, direction='forward'):
    validation_data = load_validation_data()
    project_data = load_project_data()
    posts = list(project_data[project].keys())
    
    # Excluir estruturas com status 'extra'
    posts = [post for post in posts if validation_data['validations'][project].get(post, {}).get('status') != 'extra']

    if direction == 'forward':
        ordered_posts = order_structures_by_latlong({post: project_data[project][post] for post in posts})
    else:
        ordered_posts = order_structures_by_latlong({post: project_data[project][post] for post in posts})
        ordered_posts = ordered_posts[::-1]
    current_index = ordered_posts.index(current_post)
    
    print(f"Current post: {current_post}")
    print(f"Ordered posts: {ordered_posts}")
    print(f"Current index: {current_index}")

    
    next_index = current_index + 1

    print(f"Next index: {next_index}")

    if 0 <= next_index < len(ordered_posts):
        return ordered_posts[next_index]
    else:
        # Quando não há mais postes na direção escolhida, retornar None
        return None
```

__init__.py
```
"""
This module defines the Flask application factory function, which sets up the Flask app with
the necessary configurations and registers the main and validation blueprints.

Modules:
    routes: Contains the main and validation blueprints.
    flask: Provides the Flask class for creating the Flask app.

Functions:
    create_app(): Creates and configures the Flask application.
"""

from flask import Flask

from .routes import main_bp, validation_bp


def create_app():
    """
    Creates and configures the Flask application.

    This function initializes the Flask app with template and static folders,
    loads configurations from the config object, and registers the main and
    validation blueprints.

    Returns:
        Flask: The configured Flask application instance.
    """

    app = Flask(
        __name__,
        template_folder='templates',
        static_folder='static'
    )
    app.config.from_object('config.Config')

    with app.app_context():
        app.register_blueprint(main_bp)
        app.register_blueprint(validation_bp)

    return app

```

add_new_structure.html
```
<!DOCTYPE html>
<html>
<head>
    <title>Avaliar Nova Estrutura</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="/static/css/style.css" rel="stylesheet">
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <div class="container">
        <!-- Flash Messages -->
        {% with messages = get_flashed_messages() %}
            {% if messages %}
                {% for message in messages %}
                    <div class="alert alert-success" role="alert">
                        {{ message }}
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <!-- Page Header -->
        <h1 class="text-left my-4">Avaliar Nova Estrutura</h1>
        <h2 class="text-felt my-4">Projeto: {{ project }}</h2>

        <!-- Add New Structure Form -->
        <form method="post" action="{{ url_for('validation.add_new_structure', project=project) }}">
            <div class="mb-3">
                <label for="new_structure" class="form-label">Nome da Nova Estrutura:</label>
                <input type="text" class="form-control" id="new_structure" name="new_structure" required>
            </div>
            <div class="mb-3">
                <label for="latitude" class="form-label">Latitude:</label>
                <input type="text" class="form-control" id="latitude" name="latitude" required>
            </div>
            <div class="mb-3">
                <label for="longitude" class="form-label">Longitude:</label>
                <input type="text" class="form-control" id="longitude" name="longitude" required>
            </div>
            <!-- Button to Get Location -->
            <button type="button" class="btn btn-secondary" onclick="getLocation()">Obter Localização</button>
            <button type="submit" class="btn btn-primary">Avaliar Estrutura</button>
        </form>
        
        
    <!-- Back to Structure Selection -->
    <a href="{{ url_for('validation.select_structure', project=project) }}" class="btn btn-link mt-4">Voltar para Seleção de Estruturas</a>
    </div>

    <!-- JavaScript to Get Location -->
    <script>
        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition, showError);
            } else {
                alert("Geolocalização não é suportada por este navegador.");
            }
        }

        function showPosition(position) {
            document.getElementById('latitude').value = position.coords.latitude;
            document.getElementById('longitude').value = position.coords.longitude;
        }

        function showError(error) {
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    alert("Usuário rejeitou a solicitação de Geolocalização.");
                    break;
                case error.POSITION_UNAVAILABLE:
                    alert("As informações de localização não estão disponíveis.");
                    break;
                case error.TIMEOUT:
                    alert("A solicitação para obter a localização do usuário expirou.");
                    break;
                case error.UNKNOWN_ERROR:
                    alert("Ocorreu um erro desconhecido.");
                    break;
            }
        }
    </script>

</body>
</html>

```

error.html
```
<!DOCTYPE html>
<html>
<head>
    <title>Error</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="/static/css/style.css" rel="stylesheet">
    <!-- Custom JavaScript -->
    <script src="/static/js/script.js"></script>
</head>
<body>
    <div class="container">
        <!-- Error Message -->
        <h1 class="text-center my-4">Erro: Arquivo Não Encontrado</h1>
        <p>O arquivo PDF solicitado não pôde ser encontrado. Por favor, verifique o nome do arquivo e tente novamente.</p>
        <!-- Back to Home Button -->
        <a href="/" class="btn btn-primary">Voltar para a Página Inicial</a>
    </div>
</body>
</html>

```

home.html
```
<!DOCTYPE html>
<html>
<head>
    <title>Seleção de Projeto</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="/static/css/style.css" rel="stylesheet">
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Custom JavaScript -->
    <script src="/static/js/script.js"></script>
</head>
<body>
    <div class="container">
        <!-- Flash Messages -->
        {% with messages = get_flashed_messages() %}
            {% if messages %}
                {% for message in messages %}
                    <div class="alert alert-success" role="alert">
                        {{ message }}
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <!-- Page Header -->
        <h1 class="text-center my-4">Projetos a serem validados:</h1>

        <!-- Project Selection Form -->
        <form method="post">
            <div class="mb-3">
                <label for="project" class="form-label">Escolha um projeto:</label>
                <select name="project" id="project" class="form-select" aria-describedby="projectHelp">
                    <option value="">Selecione um projeto</option>
                    {% for project in projects %}
                        <option value="{{ project }}">{{ project }}</option>
                    {% endfor %}
                </select>
            </div>
            <!-- Buttons to Check Structures and Open PDF -->
            <button type="submit" id="select-structure-btn" name="action" value="select_structure" class="btn btn-primary" disabled>Conferir Estruturas</button>
            <button type="button" id="open-pdf-btn" onclick="openPDF();" class="btn btn-primary" disabled>Abrir PDF do Projeto</button>
        </form>

        <!-- Container for Project Summary -->
        <div id="project-summary" class="mt-4"></div>
    </div>
</body>
</html>

```

results.html
```
<!DOCTYPE html>
<html>
<head>
    <title>Resultados da Validação</title>
    <meta charset="UTF-8">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="/static/css/style.css" rel="stylesheet">
    <!-- Popper.js for Bootstrap -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.min.js"></script>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Custom JavaScript -->
    <script src="/static/js/script.js"></script>
</head>
<body>
    <div class="container">        
        <!-- Page Header -->
        <h1 class="text-center my-4">Resultados da Validação</h1>

        <!-- Validated Items Section -->
        {% if new_structure %}
            <h2 class="section-header">Itens Verificados:</h2>
            <ul class="list-group">
                {% for item, status in encontrados.items() %}
                    <li class="list-group-item item-sim" id="item-{{ loop.index }}" onclick="toggleDetails({{ loop.index }})">
                        <span>{{ item }}: <i class="icon-sim">✓</i></span>
                        {% if item in caracteristicas %}
                            <span class="arrow" id="arrow-{{ loop.index }}">&#8250;</span>
                        {% else %}
                            <span class="minus">&#8211;</span>
                        {% endif %}
                    </li>
                    {% if item in caracteristicas %}
                        <div id="details-{{ loop.index }}" class="details">
                            <ul>
                                {% for caract, valor in caracteristicas[item].items() %}
                                    <li>{{ caract }}: {{ valor }}</li>
                                {% endfor %}
                            </ul>
                        </div>
                    {% endif %}
                {% endfor %}
            </ul>
        {% else %}
            <h2 class="section-header">Itens Verificados:</h2>
            <ul class="list-group">
                {% for item, status in encontrados.items() %}
                    {% if status == 'Sim' %}
                        <li class="list-group-item item-sim" id="item-{{ loop.index }}" onclick="toggleDetails({{ loop.index }})">
                            <span>{{ item }}: <i class="icon-sim">✓</i></span>
                            {% if item in caracteristicas %}
                                <span class="arrow" id="arrow-{{ loop.index }}">&#8250;</span>
                            {% else %}
                                <span class="minus">&#8211;</span>
                            {% endif %}
                        </li>
                        {% if item in caracteristicas %}
                            <div id="details-{{ loop.index }}" class="details">
                                <ul>
                                    {% for caract, valor in caracteristicas[item].items() %}
                                        <li>{{ caract }}: {{ valor }}</li>
                                    {% endfor %}
                                </ul>
                            </div>
                        {% endif %}
                    {% endif %}
                {% endfor %}
            </ul>

            <!-- Exceptions Found Section -->
            <h2 class="section-header">Exceções Encontradas:</h2>
            <!-- Should Exist Subsection -->
            <h3 class="subsection-header">Deveriam Existir:</h3>
            <ul class="list-group mb-4">
                {% for item, status in encontrados.items() %}
                    {% if status == 'Não' %}
                        <li class="list-group-item item-nao">
                            <span>{{ item }}: <i class="icon-nao">✗</i></span>
                        </li>
                    {% endif %}
                {% endfor %}
            </ul>

            <!-- Unplanned Found Items Subsection -->
            <h3 class="subsection-header">Itens Encontrados Não Planejados:</h3>
            <ul class="list-group mb-4">
                {% for item in extras %}
                    <li class="list-group-item item-nao-planejado" id="item-extra-{{ loop.index }}" onclick="toggleDetails('extra-{{ loop.index }}')">
                        <span>{{ item }}</span>
                        {% if item in caracteristicas %}
                            <span class="arrow" id="arrow-extra-{{ loop.index }}">&#8250;</span>
                        {% else %}
                            <span class="minus">&#8211;</span>
                        {% endif %}
                    </li>
                    {% if item in caracteristicas %}
                        <div id="details-extra-{{ loop.index }}" class="details">
                            <ul>
                                {% for caract, valor in caracteristicas[item].items() %}
                                    <li>{{ caract }}: {{ valor }}</li>
                                {% endfor %}
                            </ul>
                        </div>
                    {% endif %}
                {% endfor %}
            </ul>
        {% endif %}

        <!-- Comments Form -->
        <form id="validationForm" method="post" action="{{ url_for('validation.results', project=project, post=post, new_structure=new_structure, latitude=request.args.get('latitude'), longitude=request.args.get('longitude'), direction=request.args.get('direction')) }}">
            <div class="mb-3">
                <label for="comments" class="form-label">Comentários:</label>
                <textarea class="form-control" id="comments" name="comments" rows="3"></textarea>
            </div>
            <!-- Form Buttons -->
            {% if not new_structure %}
                <button type="submit" name="action" value="validate_post" class="btn btn-success">Validar Estrutura</button>
                <button type="submit" name="action" value="invalidate_post" class="btn btn-danger" id="invalidateButton" data-bs-toggle="tooltip" data-bs-placement="top" title='Comente o motivo. Por exemplo: "App não identificou corretamente, na verdade o transformador monofásico existe."'>Confirma Divergência</button>
            {% endif %}
            <button type="submit" name="action" value="remove_photo" class="btn btn-warning">Tirar Nova Foto</button>
        </form>
        {% if new_structure %}
            <form id="addStructureForm" method="post" action="{{ url_for('validation.add_structure_to_project', project=project, post=post, latitude=request.args.get('latitude'), longitude=request.args.get('longitude')) }}">
                <button type="submit" class="btn btn-secondary">Adicionar Nova Estrutura Ao Projeto</button>
            </form>
        {% endif %}
        <!-- Back to Home Link -->
        <a href="/" class="btn btn-link mt-4">Voltar para Seleção de Projetos</a>
    </div>

    <!-- Initialize Bootstrap Tooltip -->
    <script>
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })

        // Disable invalidate button if comments are empty
        document.getElementById('validationForm').addEventListener('submit', function(event) {
            var comments = document.getElementById('comments').value.trim();
            if (event.submitter && event.submitter.name === 'action' && event.submitter.value === 'invalidate_post' && comments === '') {
                event.preventDefault();
                alert('Por favor, comente o motivo da divergência antes de confirmar.');
            }
        });
    </script>
</body>
</html>

```

select_structure.html
```
<!DOCTYPE html>
<html>
<head>
    <title>Seleção de Estruturas</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="/static/css/style.css" rel="stylesheet">
    <!-- Custom JavaScript -->
    <script src="/static/js/script.js"></script>
</head>
<body>    
    <div class="container">
        <!-- Flash Messages -->
        {% with messages = get_flashed_messages() %}
            {% if messages %}
                {% for message in messages %}
                    <div class="alert alert-success" role="alert">
                        {{ message }}
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <!-- Page Header -->
        <h1 class="text-center my-4">Estruturas do Projeto: {{ project }}</h1>

        <form method="post">
            <div class="mb-3">
                <label for="side" class="form-label">Escolha o lado para começar a validação:</label>
                <select name="side" id="side" class="form-select" required>
                    <option value="A">Lado A - Inicio na Estrutra: {{ posts[0] }}</option>
                    <option value="B">Lado B - Inicio na Estrutra: {{ posts[-1] }}</option>
                </select>
            </div>
            <button type="submit" name="start_validation" class="btn btn-primary">Começar Validação</button>
        </form>
        <!-- Structure Selection Form -->
        <div class="mb-3">
            <form method="post">
                <div class="mb-3">
                    <label for="post" class="form-label">Escolha uma estrutura:</label>
                    <select name="post" id="post" class="form-select">
                        {% for post in posts %}
                            {% set status = validadas[post]['status'] %}
                            {% if status == 'valid' %}
                                <option value="{{ post }}">{{ post }} ✓</option>
                            {% elif status == 'invalid' %}
                                <option value="{{ post }}">{{ post }} ✗</option>
                            {% elif status == 'extra' %}
                                <option value="{{ post }}">{{ post }} Ø</option>
                            {% else %}
                                <option value="{{ post }}">{{ post }} ─</option>
                            {% endif %}
                        {% endfor %}
                    </select>
                </div>
                <div class="d-flex">
                    <button type="submit" class="btn btn-primary me-2">Selecionar Estrutura</button>
                </div>
            </form>
        </div>

        <!-- Botão para adicionar nova estrutura -->
        <div class="mb-3">
            <form method="get" action="{{ url_for('validation.add_new_structure') }}">
                <input type="hidden" name="project" value="{{ project }}">
                <button type="submit" class="btn btn-primary me-2">Adicionar Nova Estrutura</button>
            </form>
        </div>

        <!-- Button to Get Location and Sort List
        <button type="button" class="btn btn-secondary" onclick="getLocation()">Ordenar Lista por Localização</button> -->
        
        <!-- Manual Location Input Form
        <h6 class="mt-3">Ou insira sua localização manualmente:</h6>
        <form id="manual-location-form" method="post" class="mt-3">
            <div class="row">
                <div class="col">
                    <input type="text" class="form-control" id="manual-latitude" name="latitude" placeholder="Latitude" required>
                </div>
                <div class="col">
                    <input type="text" class="form-control" id="manual-longitude" name="longitude" placeholder="Longitude" required>
                </div>
            </div>
            <input type="hidden" name="get_location" value="true">
            <button type="submit" class="btn btn-secondary mt-3">Ordenar Lista por Lat Long</button>
        </form> -->

        <!-- Hidden Form to Get Location -->
        <form id="get-location-form" method="post" class="mt-3">
            <input type="hidden" name="latitude" id="latitude">
            <input type="hidden" name="longitude" id="longitude">
            <input type="hidden" name="get_location" value="true">
        </form>

        <!-- Back to Home Link -->
        <a href="/" class="btn btn-link mt-4">Voltar para Seleção de Projetos</a>
    </div>
</body>
</html>

```

upload_photo.html
```
<!DOCTYPE html>
<html>
<head>
    <title>Upload de Foto</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="/static/css/style.css" rel="stylesheet">
    <!-- Custom JavaScript -->
    <script src="/static/js/script.js"></script>
</head>
<body>
    <!-- Loading Spinner Overlay -->
    <div class="loading-overlay" id="loading-overlay">
        <div class="spinner"></div>
    </div>
    <div class="container">
        <!-- Flash Messages -->
        {% with messages = get_flashed_messages() %}
            {% if messages %}
                {% for message in messages %}
                    <div class="alert alert-warning" role="alert">
                        {{ message }}
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <!-- Page Header -->
        <h1 class="my-4">Upload de Foto</h1>
        <h2 class="my-4">Projeto: {{ project }}</h2>
        <h2 class="my-4">Estrutura: {{ post }}</h2>

        <!-- Photo Upload Guidelines -->
        <p class="lead">Siga estas recomendações para garantir a melhor captura:</p>
        <ul>
            <li>Ficar a uma distância que consiga tirar uma foto clara da metade do poste para cima.</li>
            <li>Ficar a 45º do centro do poste, buscando o melhor ângulo que mostre com clareza todos os componentes do projeto.</li>
            <li>Utilizar um celular com resolução alta, sem flash.</li>
            <li>Buscar ficar de costas para o sol.</li>
        </ul>

        <!-- Photo Upload Form -->
        <form method="post" enctype="multipart/form-data" class="my-3" onsubmit="showLoadingSpinner();">
            <input type="hidden" name="latitude" value="{{ request.args.get('latitude') }}">
            <input type="hidden" name="longitude" value="{{ request.args.get('longitude') }}">
            <input type="hidden" name="direction" value="{{ request.args.get('direction') }}">
            <!-- File Input -->
            <div class="mb-3">
                <input type="file" class="form-control" name="photo" id="file-input" required onchange="previewImage();">
            </div>
            <!-- Image Preview -->
            <img id="image-preview" src="{{ uploaded_image if uploaded_image else example_image }}" alt="Image Preview" class="image-preview">
            <!-- Upload Progress Bar -->
            <div class="progress" style="height: 20px; display: none;">
                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary" id="submit-btn">Iniciar Validação</button>
        </form>
        <!-- Back to Home Link -->
        <a href="{{ url_for('validation.select_structure', project=project) }}" class="btn btn-link mt-4">Voltar para Seleção de Estruturas</a>
    </div>
</body>
</html>

```

output.json
```
{
    "Poste Elétrico": true,
    "Cruzeta": true,
    "Transformador Monofásico": true,
    "Luminária": true,
    "Chave Seccionadora (Chave Faca)": true,
    "Quantidades": {
        "Poste Elétrico": 1,
        "Cruzeta": 1,
        "Transformador Monofásico": 2,
        "Luminária": 1,
        "Chave Seccionadora (Chave Faca)": 2
    }
}
```

output.txt
```
{
  "Poste Elétrico": true,
  "Cruzeta": true,
  "Transformador Monofásico": true,
  "Luminária": true,
  "Chave Seccionadora (Chave Faca)": true,
  "Quantidades": {
    "Poste Elétrico": 1,
    "Cruzeta": 1,
    "Transformador Monofásico": 2,
    "Luminária": 1,
    "Chave Seccionadora (Chave Faca)": 2
  }
}
```

projetos.json
```
{
    "Projeto X": {
        "Poste 1": {
            "latitude": -23.55052,
            "longitude": -46.633308,
            "Gabarito": {
                "Poste Elétrico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Cruzeta": {
                    "Existe": "True",
                    "Quantidade": 3
                },
                "Chave Seccionadora (Chave Faca)": {
                    "Existe": "True",
                    "Quantidade": 3
                },
                "Transformador Trifásico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Luminária": {
                    "Existe": "True",
                    "Quantidade": 1
                }
            }
        },
        "Poste 2": {
            "latitude": -23.55102,
            "longitude": -46.634308,
            "Gabarito": {
                "Poste Elétrico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Cruzeta": {
                    "Existe": "True",
                    "Quantidade": 4
                },
                "Chave Seccionadora (Chave Faca)": {
                    "Existe": "True",
                    "Quantidade": 2
                },
                "Transformador Trifásico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Transformador Monofásico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Luminária": {
                    "Existe": "True",
                    "Quantidade": 1
                }
            }
        },
        "Poste 3": {
            "latitude": -23.55252,
            "longitude": -46.635308,
            "Gabarito": {
                "Poste Elétrico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Cruzeta": {
                    "Existe": "True",
                    "Quantidade": 2
                },
                "Chave Seccionadora (Chave Faca)": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Transformador Monofásico": {
                    "Existe": "True",
                    "Quantidade": 1
                }
            }
        }
    },
    "Projeto Y": {
        "Poste 4": {
            "latitude": -22.91002,
            "longitude": -43.2075,
            "Gabarito": {
                "Poste Elétrico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Cruzeta": {
                    "Existe": "True",
                    "Quantidade": 3
                },
                "Chave Seccionadora (Chave Faca)": {
                    "Existe": "True",
                    "Quantidade": 2
                },
                "Transformador Trifásico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Transformador Monofásico": {
                    "Existe": "True",
                    "Quantidade": 1
                }
            }
        },
        "Poste 5": {
            "latitude": -22.91102,
            "longitude": -43.2085,
            "Gabarito": {
                "Poste Elétrico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Cruzeta": {
                    "Existe": "True",
                    "Quantidade": 3
                },
                "Chave Seccionadora (Chave Faca)": {
                    "Existe": "True",
                    "Quantidade": 2
                },
                "Transformador Trifásico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Transformador Monofásico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Luminária": {
                    "Existe": "True",
                    "Quantidade": 1
                }
            }
        },
        "Poste 6": {
            "latitude": -22.91202,
            "longitude": -43.2095,
            "Gabarito": {
                "Poste Elétrico": {
                    "Existe": "True",
                    "Quantidade": 1
                },
                "Cruzeta": {
                    "Existe": "True",
                    "Quantidade": 4
                },
                "Chave Seccionadora (Chave Faca)": {
                    "Existe": "True",
                    "Quantidade": 9
                },
                "Religador": {
                    "Existe": "True",
                    "Quantidade": 1
                }
            }
        },
        "Nova Estrutura 3": {
            "latitude": -23.664593,
            "longitude": -46.534564,
            "Gabarito": {}
        }
    }
}
```

results.json
```
{
    "Itens Verificados": {
        "Poste Elétrico": "Sim",
        "Cruzeta": "Sim",
        "Chave Seccionadora (Chave Faca)": "Sim",
        "Transformador Trifásico": "Não",
        "Transformador Monofásico": "Sim",
        "Luminária": "Sim"
    },
    "Características": {
        "Poste Elétrico": {
            "Quantidade Identificada": 1
        },
        "Cruzeta": {
            "Quantidade Identificada": 1
        },
        "Chave Seccionadora (Chave Faca)": {
            "Quantidade Identificada": 2
        },
        "Transformador Monofásico": {
            "Quantidade Identificada": 2
        },
        "Luminária": {
            "Quantidade Identificada": 1
        }
    }
}
```

validation.json
```
{
    "validations": {
        "Projeto X": {
            "Poste 1": {
                "status": "valid",
                "comments": ""
            },
            "Poste 2": {
                "status": "valid",
                "comments": ""
            },
            "Poste 3": {
                "status": "valid",
                "comments": ""
            }
        },
        "Projeto Y": {
            "Poste 4": {
                "status": "valid",
                "comments": "Testestes"
            },
            "Poste 5": {
                "status": "valid",
                "comments": ""
            },
            "Poste 6": {
                "status": "invalid",
                "comments": ""
            },
            "Nova Estrutura 3": {
                "status": "extra",
                "comments": ""
            }
        },
        "": {}
    }
}
```

